{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchField","target","value","fetch","then","responce","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2OAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAExB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACE,4BAAKC,GACL,2BAAIC,MCcGI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAKO,EAAOG,GAAGV,GACfC,KAAOM,EAAOG,GAAGT,KACjBC,MAAQK,EAAOG,GAAGR,aCCfU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKV,UAAU,OACb,2BACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCaFI,E,YAnBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,iFAQjBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAGC,KAAKF,MAAMC,SACL,yDAEFC,KAAKH,MAAMK,a,GAhBMC,aCQbC,EARA,SAACP,GACd,OACE,yBAAKQ,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEX,EAAMK,WC6CCO,G,kBAxCX,aAAe,IAAD,8BACZ,+CAcFC,eAAiB,SAACC,GAAD,OAAW,EAAKV,SAAS,CAAEW,YAAaD,EAAME,OAAOC,SAbpE,EAAKhB,MAAQ,CACXZ,OAAQ,GACR0B,YAAa,IAJH,E,iFASO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKlB,SAAS,CAAEf,OAAQiC,S,+BAK9B,IAAD,EACyBnB,KAAKF,MAA7BZ,EADD,EACCA,OAAQ0B,EADT,EACSA,YACVQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GAAK,OAAIA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAG9F,OAAIrC,EAAOuC,OAIT,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAeQ,KAAKU,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAASkC,OARhB,8C,GAxBKjB,cCGEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.67e6c8aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {//using function not class here. To show robots from robots.js file use props now\r\n  //const { name, email, id } = props; //also ecmascript6 sintax applayng props so not need type ${props.id} in img tag or {props.name} in h2 ect.\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />{/* sintax from ecmascript6 */}\r\n      <div>\r\n        <h2>{name}</h2>{/*javascript expresions is in brackets*/}\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//without having something called a key prop, if some of these cards get deleted, React won't know which one’s which and we’ll have to change the entire DOM. Versus if it had a key prop that says ‘oh this one gets removed’ I can just remove this from the DOM. Remember we want to minimize the amount of work that we do to the DOM. So when you do a loop it's just something you have to remember. You have to give it a unique key. In our case We can just say ‘i’ which is index key={i}.\r\nconst CardList = ({ robots }) => {\r\n  return(\r\n    <div>\r\n     {\r\n       robots.map((user, i) => {\r\n          return(\r\n            <Card \r\n            key={i} \r\n            id={ robots[i].id } \r\n            name={ robots[i].name } \r\n            email={ robots[i].email }\r\n            />\r\n          ) \r\n       })\r\n     }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n      className=\"pa3 ba b--green bg-lightest-blue\"\r\n      type=\"search\"\r\n      placeholder=\"search robots\"\r\n      onChange={ searchChange }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n//We use this component around others to display error mesage\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch() {//this new method catch bugs and if something is wrong it's renders h1 below \r\n    this.setState({ hasError: true });//set state - установить состояние\r\n  }//it's remaind me passport security \r\n\r\n  render () {\r\n    if(this.state.hasError) {//Check or component has error\r\n      return <h1>Ooops something go wrong!</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (//in css is overflow-y in jsx camelcase overflowY\r\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n      { props.children }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Scroll from '../components/Scroll';\r\n//import { robots } from './robots';//'./' means robots in same directory and { robots } here is variable so if it's gonna be more variables for example \"cats\" need type { robots, cats }\r\nimport './App.css';\r\n  \r\n//to use state we can't use ecmascript insteed we use class\r\nclass App extends Component {\r\n    constructor() {//It's how to import state in class with help of constructor and super\r\n      super()\r\n      this.state = {//state is something that can change and affect our app now I use {this.state.robots}\r\n        robots: [],\r\n        searchField: ''\r\n      }\r\n    }\r\n\r\n    //Fetch is a method on the window object. It comes with all browsers now. It is a tool for us to make requests. To servers, and as you can see this is a server(link) that returns for us. When we do slash users a list of users that we can use which is perfect for our app.\r\n    componentDidMount() {//component did mount - компонент сделал монтирование\r\n      fetch('https://jsonplaceholder.typicode.com/users')//fetch - получить \r\n      .then(responce => responce.json())//responce - Быстродействие\r\n      .then(users=> this.setState({ robots: users }));\r\n    }\r\n\r\n    onSearchChange = (event) => this.setState({ searchField: event.target.value });//I make this function shorter\r\n\r\n    render() {\r\n      const { robots, searchField } = this.state;\r\n      const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));//I make this function shorter and change robots to robot\r\n    \r\n    //In case if you have lot of users you can use if statment\r\n    if(!robots.length) {\r\n      return <h1>Loading...</h1>\r\n    } else {\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className='f2'>RoboFriends</h1>\r\n        <SearchBox searchChange={ this.onSearchChange } />\r\n        <Scroll>\r\n        <ErrorBoundary>{/* wrap error component around card list */}\r\n          <CardList robots={ filteredRobots } />\r\n        </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n   }//else end\r\n  } \r\n}\r\n\r\nexport default App;\r\n\r\n//NOTE ABOUT \"STATE\"-состояние TO REMEMBER\r\n//Props never change. Props are always just inputs that we get and we've never modified them. But in this case we need a memory in our app. We need this to communicate with this, and also change and update accordingly And that's what \"state\" is in React. \"State\" - and you'll hear this in computer programming a lot - simply means the description of your app. A \"state\" is simply an object - an object that describes your application. And this \"state\" which describes our application is the robots, and whatever's entered in the search box and \"state\" is able to change. We're able to change the value of the search box, the value of the input, and we're able to change what robot's array means What gets displayed. This is a rule that you just have to remember. Props are simply things that come out of \"state\" So a parent feeds \"state\" into a child component and as soon as a child (components) component receives a \"state\" it's a property. That child can never change that property. The parent just tells it what the \"state\" is and the child receives it as \"robots\".","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";//add similar classes like in bootstrap \"npm install tachyons\"\n\nReactDOM.render(<App/> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}